name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run Black formatter check
      run: python -m black --check --diff app/ tests/
      
    - name: Run isort import sorting check
      run: python -m isort --check-only --diff app/ tests/
      
    - name: Run mypy type checking
      run: python -m mypy app/
      
    - name: Run flake8 linting
      run: python -m flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

  test:
    name: Run Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run tests with coverage
      env:
        TESTING: "true"
        OBSIDIAN_VAULT_PATH: "/tmp/test-vault"
        UPLOAD_DIR: "/tmp/test-uploads"
      run: |
        python -m pytest \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v
          
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build & Validation
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: voice-notes-api:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    - name: Test Docker container
      run: |
        # Build and run container for health check
        docker build -t voice-notes-api:test .
        docker run -d --name test-container -p 8000:8000 \
          -e APP_NAME="Test" \
          -e APP_VERSION="test" \
          -e LOG_LEVEL="INFO" \
          voice-notes-api:test
          
        # Wait for container to start
        sleep 10
        
        # Check health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'voice-notes-api:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy config scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        hide-progress: false
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        
    - name: Python Security Check
      run: |
        pip install safety
        safety check --json
        
    - name: Secrets Detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-compose-test:
    name: Docker Compose Integration
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment file
      run: |
        echo "OBSIDIAN_VAULT_PATH=./test-vault" > .env
        echo "LOG_LEVEL=INFO" >> .env
        echo "MAX_UPLOAD_SIZE=52428800" >> .env
        echo "PROCESSING_TIMEOUT=35" >> .env
        
    - name: Create test vault directory
      run: mkdir -p ./test-vault
      
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --build
        
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c '
          until curl -f http://localhost:8000/health; do
            echo "Waiting for API to be ready..."
            sleep 2
          done
        '
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test API documentation
        curl -f http://localhost:8000/docs
        
    - name: Check container logs
      if: failure()
      run: |
        docker-compose logs
        
    - name: Clean up
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: docker-compose-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run performance tests
      run: |
        # Basic load testing
        python -m pytest tests/ -k "performance" -v || echo "No performance tests found"
        
    - name: Validate build time
      run: |
        start_time=$(date +%s)
        docker build -t voice-notes-api:perf .
        end_time=$(date +%s)
        build_time=$((end_time - start_time))
        echo "Docker build time: ${build_time}s"
        
        # Fail if build takes longer than 5 minutes (300s)
        if [ $build_time -gt 300 ]; then
          echo "Build time exceeded 5 minutes limit"
          exit 1
        fi

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, docker-build, security-scan, docker-compose-test]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Check job status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "failure" ]] || \
           [[ "${{ needs.test.result }}" == "failure" ]] || \
           [[ "${{ needs.docker-build.result }}" == "failure" ]] || \
           [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
           [[ "${{ needs.docker-compose-test.result }}" == "failure" ]]; then
          echo "CI Pipeline failed on main branch"
          exit 1
        else
          echo "CI Pipeline successful"
        fi